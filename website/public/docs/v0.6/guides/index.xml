<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guides on Talos Linux</title>
    <link>https://talos.dev/docs/v0.6/guides/</link>
    <description>Recent content in Guides on Talos Linux</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://talos.dev/docs/v0.6/guides/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Advanced Networking</title>
      <link>https://talos.dev/docs/v0.6/guides/advanced-networking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talos.dev/docs/v0.6/guides/advanced-networking/</guid>
      <description>Static Addressing Static addressing is comprised of specifying cidr, routes ( remember to add your default gateway ), and interface. Most likely you&amp;rsquo;ll also want to define the nameservers so you have properly functioning DNS.
machine:  network:  hostname: talos  nameservers:  - 10.0.0.1  time:  servers:  - time.cloudflare.com  interfaces:  - interface: eth0  cidr: 10.0.0.201/8  mtu: 8765  routes:  - network: 0.</description>
    </item>
    
    <item>
      <title>Configuring Containerd</title>
      <link>https://talos.dev/docs/v0.6/guides/configuring-containerd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talos.dev/docs/v0.6/guides/configuring-containerd/</guid>
      <description>The base containerd configuration expects to merge in any additional configs present in /var/cri/conf.d/*.toml.
An example of exposing metrics Into each machine config, add the following:
machine:  ...  files:  - content: |[metrics] address = &amp;#34;0.0.0.0:11234&amp;#34;  path: /var/cri/conf.d/metrics.toml  op: create Create cluster like normal and see that metrics are now present on this port:
$ curl 127.0.0.1:11234/v1/metrics # HELP container_blkio_io_service_bytes_recursive_bytes The blkio io service bytes recursive # TYPE container_blkio_io_service_bytes_recursive_bytes gauge container_blkio_io_service_bytes_recursive_bytes{container_id=&amp;#34;0677d73196f5f4be1d408aab1c4125cf9e6c458a4bea39e590ac779709ffbe14&amp;#34;,device=&amp;#34;/dev/dm-0&amp;#34;,major=&amp;#34;253&amp;#34;,minor=&amp;#34;0&amp;#34;,namespace=&amp;#34;k8s.</description>
    </item>
    
    <item>
      <title>Configuring Corporate Proxies</title>
      <link>https://talos.dev/docs/v0.6/guides/configuring-corporate-proxies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talos.dev/docs/v0.6/guides/configuring-corporate-proxies/</guid>
      <description>Appending the Certificate Authority of MITM Proxies Put into each machine the PEM encoded certificate:
machine:  ...  files:  - content: |-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----  permissions: 0644  path: /etc/ssl/certs/ca-certificates  op: append Configuring a Machine to Use the Proxy To make use of a proxy:
machine:  env:  http_proxy: &amp;lt;http proxy&amp;gt;  https_proxy: &amp;lt;https proxy&amp;gt;  no_proxy: &amp;lt;no proxy&amp;gt; Additionally, configure the DNS nameservers, and NTP servers:</description>
    </item>
    
    <item>
      <title>Configuring Pull Through Cache</title>
      <link>https://talos.dev/docs/v0.6/guides/configuring-pull-through-cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talos.dev/docs/v0.6/guides/configuring-pull-through-cache/</guid>
      <description>In this guide we will create a set of local caching Docker registry proxies to minimize local cluster startup time.
When running Talos locally, pulling images from Docker registries might take a significant amount of time. We spin up local caching pass-through registries to cache images and configure a local Talos cluster to use those proxies. A similar approach might be used to run Talos in production in air-gapped environments. It can be also used to verify that all the images are available in local registries.</description>
    </item>
    
    <item>
      <title>Configuring the Cluster Endpoint</title>
      <link>https://talos.dev/docs/v0.6/guides/configuring-the-cluster-endpoint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talos.dev/docs/v0.6/guides/configuring-the-cluster-endpoint/</guid>
      <description>In this section, we will step through the configuration of a Talos based Kubernetes cluster. There are three major components we will configure:
 apid and talosctl the master nodes the worker nodes  Talos enforces a high level of security by using mutual TLS for authentication and authorization.
We recommend that the configuration of Talos be performed by a cluster owner. A cluster owner should be a person of authority within an organization, perhaps a director, manager, or senior member of a team.</description>
    </item>
    
    <item>
      <title>Customizing the Kernel</title>
      <link>https://talos.dev/docs/v0.6/guides/customizing-the-kernel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talos.dev/docs/v0.6/guides/customizing-the-kernel/</guid>
      <description>FROMscratch AS customization COPY --from=&amp;lt;custom kernel image&amp;gt; /lib/modules /lib/modules  FROMdocker.io/andrewrynhard/installer:latest COPY --from=&amp;lt;custom kernel image&amp;gt; /boot/vmlinuz /usr/install/vmlinuz docker build --build-arg RM=&amp;#34;/lib/modules&amp;#34; -t talos-installer .  Note: You can use the --squash flag to create smaller images.
 Now that we have a custom installer we can build Talos for the specific platform we wish to deploy to.</description>
    </item>
    
    <item>
      <title>Customizing the Root Filesystem</title>
      <link>https://talos.dev/docs/v0.6/guides/customizing-the-root-filesystem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talos.dev/docs/v0.6/guides/customizing-the-root-filesystem/</guid>
      <description>The installer image contains ONBUILD instructions that handle the following:
 the decompression, and unpacking of the initramfs.xz the unsquashing of the rootfs the copying of new rootfs files the squashing of the new rootfs and the packing, and compression of the new initramfs.xz  When used as a base image, the installer will perform the above steps automatically with the requirement that a customization stage be defined in the Dockerfile.</description>
    </item>
    
    <item>
      <title>Managing PKI</title>
      <link>https://talos.dev/docs/v0.6/guides/managing-pki/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talos.dev/docs/v0.6/guides/managing-pki/</guid>
      <description>Generating an Administrator Key Pair In order to create a key pair, you will need the root CA.
Save the the CA public key, and CA private key as ca.crt, and ca.key respectively. Now, run the following commands to generate a certificate:
talosctl gen key --name admin talosctl gen csr --key admin.key --ip 127.0.0.1 talosctl gen crt --ca ca --csr admin.csr --name admin Now, base64 encode admin.crt, and admin.key:
cat admin.</description>
    </item>
    
    <item>
      <title>Resetting a Machine</title>
      <link>https://talos.dev/docs/v0.6/guides/resetting-a-machine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talos.dev/docs/v0.6/guides/resetting-a-machine/</guid>
      <description>From time to time, it may be beneficial to reset a Talos machine to its &amp;ldquo;original&amp;rdquo; state. Bear in mind that this is a destructive action for the given machine. Doing this means removing the machine from Kubernetes, Etcd (if applicable), and clears any data on the machine that would normally persist a reboot.
The API command for doing this is talosctl reset. There are a couple of flags as part of this command:</description>
    </item>
    
    <item>
      <title>Upgrading Kubernetes</title>
      <link>https://talos.dev/docs/v0.6/guides/upgrading-kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talos.dev/docs/v0.6/guides/upgrading-kubernetes/</guid>
      <description>Video Walkthrough To see a live demo of this writeup, see the video below:
Kubelet Image In Kubernetes 1.19, the official hyperkube image was removed. This means that in order to upgrade Kubernetes, Talos users will have to change the command, and image fields of each control plane component. The kubelet image will also have to be updated, if you wish to specify the kubelet image explicitly. The default used by Talos is sufficient in most cases.</description>
    </item>
    
    <item>
      <title>Upgrading Talos</title>
      <link>https://talos.dev/docs/v0.6/guides/upgrading-talos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talos.dev/docs/v0.6/guides/upgrading-talos/</guid>
      <description>Video Walkthrough To see a live demo of this writeup, see the video below:
Talos In an effort to create more production ready clusters, Talos will now taint control plane nodes as unschedulable. This means that any application you might have deployed must tolerate this taint if you intend on running the application on control plane nodes.
Another feature you will notice is the automatic uncordoning of nodes that have been upgraded.</description>
    </item>
    
  </channel>
</rss>
